(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chainMul33 = chainMul33;
var clip = exports.clip = function clip(n, m, M) {
  return n < M ? n > m ? n : m : M;
};

var comeCloser = exports.comeCloser = function comeCloser(n, goal, factor, limit) {
  return limit && Math.abs(goal - n) < limit ? goal : n + (goal - n) / (factor || 10);
};

var dist = exports.dist = function dist(a, b) {
  var dx = b[0] - a[0],
      dy = b[1] - a[1],
      dz = b[2] - a[2];
  return Math.sqrt(dx * dx + dy * dy + dz * dz);
};

var normalize = exports.normalize = function normalize(v) {
  var l = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  return [v[0] / l, v[1] / l, v[2] / l];
};

var projection = exports.projection = function projection(p, d, s) {
  var f = (s || 1) / (1 - p[2] / d);
  return [p[0] * f, p[1] * f, p[2]];
};

var rotateX = exports.rotateX = function rotateX(p, a) {
  var d = Math.sqrt(p[2] * p[2] + p[1] * p[1]),
      na = Math.atan2(p[2], p[1]) + a;
  return [p[0], d * Math.cos(na), d * Math.sin(na)];
};

var rotateY = exports.rotateY = function rotateY(p, a) {
  var d = Math.sqrt(p[2] * p[2] + p[0] * p[0]),
      na = Math.atan2(p[0], p[2]) + a;
  return [d * Math.sin(na), p[1], d * Math.cos(na)];
};

var rotateZ = exports.rotateZ = function rotateZ(p, a) {
  var d = Math.sqrt(p[1] * p[1] + p[0] * p[0]),
      na = Math.atan2(p[1], p[0]) + a;
  return [d * Math.cos(na), d * Math.sin(na), p[2]];
};

var rotateMatrix = exports.rotateMatrix = function rotateMatrix(p, m) {
  return [p[0] * m[0] + p[1] * m[3] + p[2] * m[6], p[0] * m[1] + p[1] * m[4] + p[2] * m[7], p[0] * m[2] + p[1] * m[5] + p[2] * m[8]];
};

var rotate3dMatrix = exports.rotate3dMatrix = function rotate3dMatrix(x, y, z, a) {
  var c = 1 - Math.cos(a),
      s = Math.sin(a);

  return [1 + c * (x * x - 1), x * y * c + z * s, x * z * c - y * s, x * y * c - z * s, 1 + c * (y * y - 1), y * z * c + x * s, x * z * c + y * s, y * z * c - x * s, 1 + c * (z * z - 1)];
};

var mul33 = function mul33(m, n) {
  var m1 = m[0],
      m2 = m[1],
      m3 = m[2],
      m4 = m[3],
      m5 = m[4],
      m6 = m[5],
      m7 = m[6],
      m8 = m[7],
      m9 = m[8];

  var n1 = n[0],
      n2 = n[1],
      n3 = n[2],
      n4 = n[3],
      n5 = n[4],
      n6 = n[5],
      n7 = n[6],
      n8 = n[7],
      n9 = n[8];

  return [m1 * n1 + m4 * n2 + m7 * n3, m2 * n1 + m5 * n2 + m8 * n3, m3 * n1 + m6 * n2 + m9 * n3, m1 * n4 + m4 * n5 + m7 * n6, m2 * n4 + m5 * n5 + m8 * n6, m3 * n4 + m6 * n5 + m9 * n6, m1 * n7 + m4 * n8 + m7 * n9, m2 * n7 + m5 * n8 + m8 * n9, m3 * n7 + m6 * n8 + m9 * n9];
};

function chainMul33(base) {
  for (var i = 1, l = arguments.length; i < l; i++) {
    base = mul33(base, arguments[i]);
  }return base;
}

},{}],2:[function(require,module,exports){
'use strict';

var _Utils = require('./Utils');

var c = document.getElementById('draw'),
    ctx = c.getContext('2d');

function onResize() {
  c.width = c.clientWidth;
  c.height = c.clientHeight;
}

window.addEventListener('resize', onResize);

onResize();

var drawCubes = function () {
  var v = [[-1, -1, -1], [-1, -1, 1], [1, -1, 1], [1, -1, -1], [1, 1, -1], [-1, 1, -1], [-1, 1, 1], [1, 1, 1]],
      e = [];
  var eFull = '0-1 1-2 2-3 3-0 4-5 5-6 6-7 7-4 0-5 1-6 2-7 3-4'.split(' ');

  for (var i = eFull.length, ea; i--;) {
    e.push([+(ea = eFull[i].split('-'))[0], +ea[1]]);
  }var offset = Math.PI * .25,
      s1 = .5 / Math.sqrt(3),
      s2 = s1 / Math.sqrt(3),
      s3 = s2 / Math.sqrt(3);
  var draws = [{
    color: '#2ecc71',
    transform: function transform(p, m) {
      return (0, _Utils.projection)((0, _Utils.rotateX)((0, _Utils.rotateMatrix)(p, m), offset), perspective, cubeSize * s1);
    }
  }, {
    color: '#e74c3c',
    transform: function transform(p, m) {
      return (0, _Utils.projection)((0, _Utils.rotateY)((0, _Utils.rotateMatrix)(p, m), offset), perspective, cubeSize * s2);
    }
  }, {
    color: '#f1c40f',
    transform: function transform(p, m) {
      return (0, _Utils.projection)((0, _Utils.rotateZ)((0, _Utils.rotateMatrix)(p, m), offset), perspective, cubeSize * s3);
    }
  }];

  return function (ctx) {
    var allLines = [],
        i = void 0,
        l = void 0,
        d = void 0;
    for (d = draws.length; d--;) {
      var draw = draws[d];
      var points = [];

      for (i = 0, l = v.length; i < l; i++) {
        points.push(draw.transform(v[i], rotMatrix));
      }for (i = e.length; i--;) {
        var edge = e[i],
            p1 = points[edge[0]],
            p2 = points[edge[1]];
        var z = (p1[2] + p2[2]) * .5;
        allLines.push([p1[0], p1[1], p2[0], p2[1], z, draw.color]);
      }
    }

    allLines.sort(function (a, b) {
      return b[4] - a[4];
    });
    ctx.lineWidth = 1.2;

    for (i = allLines.length; i--;) {
      l = allLines[i];
      ctx.strokeStyle = l[5];
      ctx.beginPath();
      ctx.moveTo(l[0], l[1]);
      ctx.lineTo(l[2], l[3]);
      ctx.stroke();
    }
  };
}();

var drawGrowing = function () {
  var easing = function easing(t) {
    return t < 0.5 ? 2 * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
  };

  var globalScale = 1,
      globalRot = 0,
      rotX = -.17;

  var transformed = function transformed(v) {
    return (0, _Utils.projection)((0, _Utils.rotateX)((0, _Utils.rotateY)(v, globalRot), rotX), perspective);
  };

  var box = function box(ctx, sX, sY, sZ) {
    var p1 = transformed([-sX, -sY, sZ]),
        p2 = transformed([sX, -sY, sZ]),
        p3 = transformed([sX, sY, sZ]),
        p4 = transformed([-sX, sY, sZ]),
        p5 = transformed([-sX, -sY, -sZ]),
        p6 = transformed([sX, -sY, -sZ]),
        p7 = transformed([sX, sY, -sZ]),
        p8 = transformed([-sX, sY, -sZ]);
    ctx.moveTo(p1[0], p1[1]);
    ctx.lineTo(p2[0], p2[1]);
    ctx.lineTo(p3[0], p3[1]);
    ctx.lineTo(p4[0], p4[1]);
    ctx.lineTo(p1[0], p1[1]);
    ctx.lineTo(p5[0], p5[1]);
    ctx.lineTo(p6[0], p6[1]);
    ctx.lineTo(p7[0], p7[1]);
    ctx.lineTo(p8[0], p8[1]);
    ctx.lineTo(p5[0], p5[1]);
    ctx.moveTo(p2[0], p2[1]);
    ctx.lineTo(p6[0], p6[1]);
    ctx.moveTo(p3[0], p3[1]);
    ctx.lineTo(p7[0], p7[1]);
    ctx.moveTo(p4[0], p4[1]);
    ctx.lineTo(p8[0], p8[1]);
  };

  var pT = void 0,
      dtMax = 1 / 60,
      t = 0;
  var animDur = 2.1;

  return function (ctx) {
    var now = Date.now();
    var dt = 0;
    if (pT) dt = Math.min((now - pT) * .001, dtMax);
    pT = now;
    t += dt;
    var p = t % animDur / animDur;
    globalScale = 1 - p * .5;
    globalRot = p * Math.PI / 2;
    var sc = cubeSize * .2;
    ctx.scale(sc, sc);
    ctx.strokeStyle = '#57ff57';
    ctx.lineWidth = .75 / sc;
    ctx.beginPath();
    box(ctx, globalScale, globalScale, globalScale);
    var scx = easing((0, _Utils.clip)(p / .27, 0, 1)) * 1.5 + .5,
        scy = easing((0, _Utils.clip)((p - .27) / .27, 0, 1)) * 1.5 + .5,
        scz = easing((0, _Utils.clip)((p - .54) / .27, 0, 1)) * 1.5 + .5;
    box(ctx, globalScale * scx, globalScale * scy, globalScale * scz);
    ctx.stroke();
  };
}();

var baseCorners = [[-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1], [1, -1, -1], [-1, -1, -1], [-1, 1, -1], [1, 1, -1]];

var faces = [{
  name: 'front',
  corners: [0, 1, 2, 3],
  draw: function draw() {
    return {};
  }
}, {
  name: 'back',
  corners: [4, 5, 6, 7],
  draw: drawGrowing
}, {
  name: 'left',
  corners: [5, 0, 3, 6],
  draw: function draw() {
    return {};
  }
}, {
  name: 'right',
  corners: [1, 4, 7, 2],
  draw: function draw() {
    return {};
  }
}, {
  name: 'bottom',
  corners: [3, 2, 7, 6],
  draw: function draw() {
    return {};
  }
}, {
  name: 'top',
  corners: [5, 4, 1, 0],
  draw: drawCubes
}];

var faceBg = 'rgba(4,13,24,.65)';
var border = 'rgb(40,130,240)';
var cubeSize = 160,
    perspective = 15;

var rot = [0, 0, 0];
var rotVel = [-6e-3, 7.6e-3, 2.13e-3];
var rotBase = [1, 0, 0, 0, 1, 0, 0, 0, 1];
var rotMatrix = void 0;

function setBase() {
  rotBase = rotMatrix;
  rot = [0, 0, 0];
}

function loop() {
  var mx = (0, _Utils.rotate3dMatrix)(1, 0, 0, rot[0]);
  var my = (0, _Utils.rotate3dMatrix)(0, 1, 0, rot[1]);
  var mz = (0, _Utils.rotate3dMatrix)(0, 0, 1, rot[2]);
  rotMatrix = (0, _Utils.chainMul33)(mx, my, mz, rotBase);

  var w = c.width;
  var h = c.height;

  var corners = baseCorners.map(function (c) {
    var res = (0, _Utils.projection)((0, _Utils.rotateMatrix)(c, rotMatrix), perspective, cubeSize * .5);
    res[0] += w * .5;res[1] += h * .5;
    return res;
  });

  ctx.clearRect(0, 0, w, h);
  for (var i = 0, l = faces.length; i < l; i++) {
    var face = faces[i];
    var z = 0;
    var faceCorners = face.currentCorners = face.corners.map(function (i) {
      var c = corners[i];
      z += c[2];
      return c;
    });
    face.z = z * .25;
  }

  faces.sort(function (a, b) {
    return a.z - b.z;
  });

  for (var _i = 0, _l = faces.length; _i < _l; _i++) {
    var _face = faces[_i];
    var _faceCorners = _face.currentCorners;
    var drawBg = void 0;
    ctx.save();
    ctx.beginPath();
    ctx.rect(0, 0, c.width, c.height);
    drawPath(ctx, _faceCorners);
    ctx.clip();
    ctx.beginPath();
    drawPath(ctx, _faceCorners);
    ctx.clip();

    _face.draw && ctx.save();
    ctx.translate(w * .5, h * .5);
    drawBg = _face.draw(ctx, faces, corners);
    ctx.restore();

    ctx.restore();

    Object.assign(ctx, {
      fillStyle: faceBg,
      strokeStyle: border,
      lineWidth: 0.5
    });

    ctx.save();
    ctx.beginPath();
    ctx.rect(c.width, 0, -c.width, c.height);
    drawPath(ctx, _faceCorners);
    ctx.clip();
    ctx.beginPath();
    drawPath(ctx, _faceCorners);
    ctx.fill();
    ctx.restore();

    ctx.beginPath();
    drawPath(ctx, _faceCorners);
    if (drawBg) ctx.fill();
    ctx.stroke();
  }
  requestAnimationFrame(loop);
}

requestAnimationFrame(loop);

function drawPath(ctx, corners) {
  if (!corners.length) return;

  ctx.moveTo(corners[0][0], corners[0][1]);
  corners.map(function (item, i) {
    return ctx.lineTo(corners[i][0], corners[i][1]);
  });
  ctx.lineTo(corners[0][0], corners[0][1]);
}

(function () {
  var grabbed = false;
  var moved = false;
  var cPos = void 0;
  var pPos = void 0;
  var lastMoveTime = void 0,
      vel = void 0,
      timer = void 0;
  var factor = 3e-3;

  function getPos(e) {
    if (e.touches && e.touches.length) e = e.touches[0];
    return [e.clientX, e.clientY];
  }

  function stopMomentum() {
    cancelAnimationFrame(timer);
    timer = null;
  }

  function mouseDown(e) {
    if (grabbed) return;

    if (!e.touches) e.preventDefault();

    stopMomentum();
    cPos = pPos = grabbed = getPos(e);
    moved = false;
  }

  function mouseMove(e) {
    if (!grabbed) return;

    var pos = getPos(e);
    var dx = grabbed[1] - pos[1],
        dy = pos[0] - grabbed[0];

    if (!moved) {
      if (dx * dx + dy * dy < 16) return;
      moved = true;
      setBase();
    }

    lastMoveTime = Date.now();
    pPos = cPos;cPos = pos;
    rot = [dx * factor, dy * factor, 0];
  }

  function mouseUp(e) {
    if (!grabbed) return;
    grabbed = false;
    if (!moved) return;
    var f = Math.max(0, 1 - (Date.now() - lastMoveTime) / 200);
    vel = [(pPos[1] - cPos[1]) * factor * f, (cPos[0] - pPos[0]) * factor * f];
    timer = requestAnimationFrame(momentum);
  }

  function momentum() {
    if (Math.abs(vel[0]) < .001 && Math.abs(vel[1]) < .001) return;
    var decay = .97;
    vel[0] *= decay;vel[1] *= decay;
    rot[0] += vel[0];rot[1] += vel[1];
    if (timer) timer = requestAnimationFrame(momentum);
  }

  document.addEventListener('mousedown', mouseDown);
  document.addEventListener('mousemove', mouseMove);
  document.addEventListener('mouseup', mouseUp);
  document.addEventListener('click', function (e) {
    if (!moved) return;
    e.preventDefault();
    e.stopPropagation();
  }, true);
  document.addEventListener('touchstart', mouseDown);
  document.addEventListener('touchmove', mouseMove);
  document.addEventListener('touchend', mouseUp);
})();

},{"./Utils":1}]},{},[2])


//# sourceMappingURL=app.min.js.map
